{
  "address": "0x9E896718720702EcFCbf0f405B34Cdc667DF465C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "withdrawn",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "node",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd74eb07aac192c93361138e01ae0af7121dd8a1f92309ea88fcc163b6437fbef",
  "receipt": {
    "to": null,
    "from": "0x5b8C253517b6Bd003369173109693B01cb6841B5",
    "contractAddress": "0x9E896718720702EcFCbf0f405B34Cdc667DF465C",
    "transactionIndex": 263,
    "gasUsed": "806124",
    "logsBloom": "0x
    "blockHash": "0xcaac0862c8ddbfebeeaf656abcaacb7a982ad4fd091128c70c3d09555a8f5409",
    "transactionHash": "0xd74eb07aac192c93361138e01ae0af7121dd8a1f92309ea88fcc163b6437fbef",
    "logs": [],
    "blockNumber": 14751038,
    "cumulativeGasUsed": "22013554",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdE0C1dC7f2b67705Cca50039418715F9C7F8D53B",
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0xf88903d82aebfe9a5fa03a1a6eb4475330ed9991c9b6ffea0f6d0154a210efbe",
    "0x4976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41"
  ],
  "solcInputHash": "4791d86bc2d57268e8b0b14728f94a78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"node\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SubdomainsRegistry.sol\":\"SubdomainsRegistry\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/SubdomainsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface ENS {\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n}\\n\\ninterface PublicResolver {\\n    function setAddr(bytes32 node, address a) external;\\n}\\n\\ncontract SubdomainsRegistry {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable owner;\\n    address public immutable token;\\n    address public immutable ens;\\n    bytes32 public immutable node;\\n    address public immutable resolver;\\n\\n    mapping(address => mapping(bytes32 => Deposit)) public deposits;\\n\\n    struct Deposit {\\n        uint64 deadline;\\n        bool withdrawn;\\n    }\\n\\n    event Register(bytes32 indexed label, address indexed to, bool indexed paid);\\n    event Withdraw(bytes32 indexed label, address indexed to);\\n\\n    constructor(\\n        address _token,\\n        address _ens,\\n        bytes32 _node,\\n        address _resolver\\n    ) {\\n        owner = msg.sender;\\n        token = _token;\\n        ens = _ens;\\n        node = _node;\\n        resolver = _resolver;\\n    }\\n\\n    function register(string memory domain, address to) external {\\n        uint256 length = bytes(domain).length;\\n        require(length >= 3, \\\"LEVX: DOMAIN_TOO_SHORT\\\");\\n\\n        bytes32 label = keccak256(abi.encodePacked(domain));\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\n        require(ENS(ens).owner(subnode) == address(0), \\\"LEVX: DUPLICATE\\\");\\n\\n        ENS(ens).setSubnodeRecord(node, label, address(this), resolver, 0);\\n\\n        PublicResolver(resolver).setAddr(subnode, to);\\n        ENS(ens).setSubnodeOwner(node, label, to);\\n\\n        bool paid = length <= 7;\\n        emit Register(label, to, paid);\\n        if (paid) {\\n            deposits[msg.sender][label].deadline = uint64(block.timestamp + 2 weeks);\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), 1e18);\\n        }\\n    }\\n\\n    function withdraw(bytes32 label, address to) external {\\n        Deposit storage deposit = deposits[msg.sender][label];\\n        (uint64 deadline, bool withdrawn) = (deposit.deadline, deposit.withdrawn);\\n        require(deadline > 0, \\\"LEVX: NON_EXISTENT\\\");\\n        require(deadline <= block.timestamp, \\\"LEVX: TOO_EARLY\\\");\\n        require(!withdrawn, \\\"LEVX: WITHDRAWN\\\");\\n\\n        deposit.withdrawn = true;\\n        emit Withdraw(label, to);\\n        IERC20(token).safeTransfer(to, 1e18);\\n    }\\n}\\n\",\"keccak256\":\"0xaa2a5547ba357cc90f5f6d52a0994be7ec2d293a664ffe711ddebba26dce55b5\",\"license\":\"WTFPL\"}},\"version\":1}",
  "bytecode": "0x61012060405234801561001157600080fd5b50604051610ee1380380610ee183398101604081905261003091610071565b336080526001600160a01b0393841660a05291831660c05260e05216610100526100be565b80516001600160a01b038116811461006c57600080fd5b919050565b6000806000806080858703121561008757600080fd5b61009085610055565b935061009e60208601610055565b9250604085015191506100b360608601610055565b905092959194509250565b60805160a05160c05160e05161010051610d9a6101476000396000818160920152818161057e015261062c0152600081816101aa0152818161040e01528181610543015261069701526000818161015c01528181610481015281816105ad01526106d40152600081816101df0152818161035d01526107dc015260006101830152610d9a6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80633f15457f1161005b5780633f15457f146101575780638da5cb5b1461017e578063d70754ec146101a5578063fc0c546a146101da57600080fd5b806304f3bcec1461008d5780631b258d50146100d15780631e59c529146100e65780632260a9c2146100f9575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e46100df366004610b37565b610201565b005b6100e46100f4366004610b7d565b610393565b610137610107366004610c3f565b600060208181529281526040808220909352908152205467ffffffffffffffff811690600160401b900460ff1682565b6040805167ffffffffffffffff90931683529015156020830152016100c8565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6101cc7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100c8565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b336000908152602081815260408083208584529091529020805467ffffffffffffffff811690600160401b900460ff16816102785760405162461bcd60e51b8152602060048201526012602482015271131155960e881393d397d1561254d511539560721b60448201526064015b60405180910390fd5b428267ffffffffffffffff1611156102c45760405162461bcd60e51b815260206004820152600f60248201526e4c4556583a20544f4f5f4541524c5960881b604482015260640161026f565b80156103045760405162461bcd60e51b815260206004820152600f60248201526e2622ab2c1d102ba4aa24222920aba760891b604482015260640161026f565b825468ff00000000000000001916600160401b1783556040516001600160a01b0385169086907f0448f4c3f7e202963aee589c062ccd162bcad2d1e20f233e7092cf77dacc61df90600090a361038c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685670de0b6b3a7640000610814565b5050505050565b815160038110156103df5760405162461bcd60e51b8152602060048201526016602482015275131155960e881113d350525397d513d3d7d4d213d49560521b604482015260640161026f565b6000836040516020016103f29190610c97565b60405160208183030381529060405280519060200120905060007f000000000000000000000000000000000000000000000000000000000000000082604051602001610448929190918252602082015260400190565b60408051808303601f190181529082905280516020909101206302571be360e01b82526004820181905291506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa1580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec9190610cb3565b6001600160a01b0316146105345760405162461bcd60e51b815260206004820152600f60248201526e4c4556583a204455504c494341544560881b604482015260640161026f565b6040516305ef2c7f60e41b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018390523060448201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b1580156105f157600080fd5b505af1158015610605573d6000803e3d6000fd5b505060405162d5fa2b60e81b8152600481018490526001600160a01b0387811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063d5fa2b009150604401600060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b50506040516306ab592360e01b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018590526001600160a01b0387811660448301527f00000000000000000000000000000000000000000000000000000000000000001692506306ab592391506064016020604051808303816000875af115801561071f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107439190610cd0565b5060405160078411159081906001600160a01b0387169085907fec70afbd65b171786ffda4b0655d145a1d6e0bc9407e225c9864fbd1b4e9104290600090a4801561080c576107954262127500610ce9565b336000818152602081815260408083208884529091529020805467ffffffffffffffff191667ffffffffffffffff939093169290921790915561080c906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169030670de0b6b3a764000061087c565b505050505050565b6040516001600160a01b03831660248201526044810182905261087790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526108ba565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526108b49085906323b872dd60e01b90608401610840565b50505050565b600061090f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661098c9092919063ffffffff16565b805190915015610877578080602001905181019061092d9190610d0f565b6108775760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161026f565b606061099b84846000856109a5565b90505b9392505050565b606082471015610a065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161026f565b6001600160a01b0385163b610a5d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161026f565b600080866001600160a01b03168587604051610a799190610c97565b60006040518083038185875af1925050503d8060008114610ab6576040519150601f19603f3d011682016040523d82523d6000602084013e610abb565b606091505b5091509150610acb828286610ad6565b979650505050505050565b60608315610ae557508161099e565b825115610af55782518084602001fd5b8160405162461bcd60e51b815260040161026f9190610d31565b6001600160a01b0381168114610b2457600080fd5b50565b8035610b3281610b0f565b919050565b60008060408385031215610b4a57600080fd5b823591506020830135610b5c81610b0f565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610b9057600080fd5b823567ffffffffffffffff80821115610ba857600080fd5b818501915085601f830112610bbc57600080fd5b813581811115610bce57610bce610b67565b604051601f8201601f19908116603f01168101908382118183101715610bf657610bf6610b67565b81604052828152886020848701011115610c0f57600080fd5b826020860160208301376000602084830101528096505050505050610c3660208401610b27565b90509250929050565b60008060408385031215610c5257600080fd5b8235610c5d81610b0f565b946020939093013593505050565b60005b83811015610c86578181015183820152602001610c6e565b838111156108b45750506000910152565b60008251610ca9818460208701610c6b565b9190910192915050565b600060208284031215610cc557600080fd5b815161099e81610b0f565b600060208284031215610ce257600080fd5b5051919050565b60008219821115610d0a57634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610d2157600080fd5b8151801515811461099e57600080fd5b6020815260008251806020840152610d50816040850160208701610c6b565b601f01601f1916919091016040019291505056fea2646970667358221220b0f6a18e4df9134b8ad805df13b4ed940f3b950b6fba1383fdf03e207f7b7d4c64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80633f15457f1161005b5780633f15457f146101575780638da5cb5b1461017e578063d70754ec146101a5578063fc0c546a146101da57600080fd5b806304f3bcec1461008d5780631b258d50146100d15780631e59c529146100e65780632260a9c2146100f9575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e46100df366004610b37565b610201565b005b6100e46100f4366004610b7d565b610393565b610137610107366004610c3f565b600060208181529281526040808220909352908152205467ffffffffffffffff811690600160401b900460ff1682565b6040805167ffffffffffffffff90931683529015156020830152016100c8565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6101cc7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100c8565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b336000908152602081815260408083208584529091529020805467ffffffffffffffff811690600160401b900460ff16816102785760405162461bcd60e51b8152602060048201526012602482015271131155960e881393d397d1561254d511539560721b60448201526064015b60405180910390fd5b428267ffffffffffffffff1611156102c45760405162461bcd60e51b815260206004820152600f60248201526e4c4556583a20544f4f5f4541524c5960881b604482015260640161026f565b80156103045760405162461bcd60e51b815260206004820152600f60248201526e2622ab2c1d102ba4aa24222920aba760891b604482015260640161026f565b825468ff00000000000000001916600160401b1783556040516001600160a01b0385169086907f0448f4c3f7e202963aee589c062ccd162bcad2d1e20f233e7092cf77dacc61df90600090a361038c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685670de0b6b3a7640000610814565b5050505050565b815160038110156103df5760405162461bcd60e51b8152602060048201526016602482015275131155960e881113d350525397d513d3d7d4d213d49560521b604482015260640161026f565b6000836040516020016103f29190610c97565b60405160208183030381529060405280519060200120905060007f000000000000000000000000000000000000000000000000000000000000000082604051602001610448929190918252602082015260400190565b60408051808303601f190181529082905280516020909101206302571be360e01b82526004820181905291506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa1580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec9190610cb3565b6001600160a01b0316146105345760405162461bcd60e51b815260206004820152600f60248201526e4c4556583a204455504c494341544560881b604482015260640161026f565b6040516305ef2c7f60e41b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018390523060448201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b1580156105f157600080fd5b505af1158015610605573d6000803e3d6000fd5b505060405162d5fa2b60e81b8152600481018490526001600160a01b0387811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063d5fa2b009150604401600060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b50506040516306ab592360e01b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018590526001600160a01b0387811660448301527f00000000000000000000000000000000000000000000000000000000000000001692506306ab592391506064016020604051808303816000875af115801561071f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107439190610cd0565b5060405160078411159081906001600160a01b0387169085907fec70afbd65b171786ffda4b0655d145a1d6e0bc9407e225c9864fbd1b4e9104290600090a4801561080c576107954262127500610ce9565b336000818152602081815260408083208884529091529020805467ffffffffffffffff191667ffffffffffffffff939093169290921790915561080c906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169030670de0b6b3a764000061087c565b505050505050565b6040516001600160a01b03831660248201526044810182905261087790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526108ba565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526108b49085906323b872dd60e01b90608401610840565b50505050565b600061090f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661098c9092919063ffffffff16565b805190915015610877578080602001905181019061092d9190610d0f565b6108775760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161026f565b606061099b84846000856109a5565b90505b9392505050565b606082471015610a065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161026f565b6001600160a01b0385163b610a5d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161026f565b600080866001600160a01b03168587604051610a799190610c97565b60006040518083038185875af1925050503d8060008114610ab6576040519150601f19603f3d011682016040523d82523d6000602084013e610abb565b606091505b5091509150610acb828286610ad6565b979650505050505050565b60608315610ae557508161099e565b825115610af55782518084602001fd5b8160405162461bcd60e51b815260040161026f9190610d31565b6001600160a01b0381168114610b2457600080fd5b50565b8035610b3281610b0f565b919050565b60008060408385031215610b4a57600080fd5b823591506020830135610b5c81610b0f565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610b9057600080fd5b823567ffffffffffffffff80821115610ba857600080fd5b818501915085601f830112610bbc57600080fd5b813581811115610bce57610bce610b67565b604051601f8201601f19908116603f01168101908382118183101715610bf657610bf6610b67565b81604052828152886020848701011115610c0f57600080fd5b826020860160208301376000602084830101528096505050505050610c3660208401610b27565b90509250929050565b60008060408385031215610c5257600080fd5b8235610c5d81610b0f565b946020939093013593505050565b60005b83811015610c86578181015183820152602001610c6e565b838111156108b45750506000910152565b60008251610ca9818460208701610c6b565b9190910192915050565b600060208284031215610cc557600080fd5b815161099e81610b0f565b600060208284031215610ce257600080fd5b5051919050565b60008219821115610d0a57634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610d2157600080fd5b8151801515811461099e57600080fd5b6020815260008251806020840152610d50816040850160208701610c6b565b601f01601f1916919091016040019291505056fea2646970667358221220b0f6a18e4df9134b8ad805df13b4ed940f3b950b6fba1383fdf03e207f7b7d4c64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 661,
        "contract": "contracts/SubdomainsRegistry.sol:SubdomainsRegistry",
        "label": "deposits",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Deposit)666_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Deposit)666_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct SubdomainsRegistry.Deposit))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Deposit)666_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Deposit)666_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SubdomainsRegistry.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)666_storage"
      },
      "t_struct(Deposit)666_storage": {
        "encoding": "inplace",
        "label": "struct SubdomainsRegistry.Deposit",
        "members": [
          {
            "astId": 663,
            "contract": "contracts/SubdomainsRegistry.sol:SubdomainsRegistry",
            "label": "deadline",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 665,
            "contract": "contracts/SubdomainsRegistry.sol:SubdomainsRegistry",
            "label": "withdrawn",
            "offset": 8,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}